{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","Component","connect","Message","style","fontSize","padding","this","message","counter","state","Button","doAction","bind","e","shiftKey","dispatch","type","ctrlKey","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","state_value","persistConfig","key","storage","persistedReducer","persistReducer","action","store","createStore","pstore","persistStore","ReactDOM","render","loading","persistor","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d9ba9e61.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Redux</h1>\n        <Message></Message>\n        <Button></Button>\n      </div>\n    );\n  }\n}\n\nApp = connect()(App);\n\nclass Message extends Component{\n  style = {\n    fontSize:\"20px\",\n    padding: \"20px 5px\"\n  }\n\n  render() {\n    return (\n      <p style = {this.style}>\n        {this.props.message} : {this.props.counter}\n      </p>\n    );\n  }\n}\n\nMessage = connect((state) => state)(Message);\n\nclass Button extends Component{\n  style = {\n    fontSize: \"16px\",\n    padding : \"5px 10px\"\n  }\n\n  constructor(props){\n    super(props);\n    this.doAction = this.doAction.bind(this);\n  }\n\n  doAction(e){\n    if(e.shiftKey){\n      this.props.dispatch({type: 'DECREMENT'});\n    }else if(e.ctrlKey){\n      this.props.dispatch({type: 'RESET'});\n    }else{\n      this.props.dispatch({type: 'INCREMENT'});\n    }\n  }\n\n  render(){\n    return (\n      <button style={this.style} onClick={this.doAction}>\n      click\n      </button>\n    );\n  }\n}\n\nButton = connect()(Button);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet state_value = {\n  counter: 0,\n  message: \"COUNTER\"\n}\n\nfunction counter(state = state_value, action) {\n  switch(action.type) {\n    case 'INCREMENT' :\n      return {\n        counter:state.counter + 1,\n        message: \"INCREMENT\"\n      };\n\n    case 'DECREMENT' :\n      return {\n        counter: state.counter - 1,\n        message: \"DECREMENT\"\n      };\n\n    case 'RESET' :\n      return {\n        counter: 0,\n        message: \"RESET\"\n      };\n\n    default :\n      return state;\n\n  }\n}\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, counter)\n\nlet store = createStore(persistedReducer)\nlet pstore = persistStore(store)\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<p>loading...</p>} persistor={pstore}>\n      <App></App>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}